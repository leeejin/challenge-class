01. 전통적인 웹 개발의 단점
1) 유지보수의 어려움
2) DOM 조작의 비효율성
3) 재사용성 부족

02. React를 사용한 웹 개발과 기존 웹 개발의 차이점
Multi Page Application VS Single Page Application
전통적인 웹 개발 방식         리액트를 사용한 웹 개발 방식, 한 번의 페이지 로드로 전체 웹 서비스에 필요한 모든 콘텐츠를 동적으로 렌더링

03.React 프로젝트 만들기
1) CRA(Create React App) :  npx create-react-app my-app 
2) Vite : npm create vite@latest

04. 가상DOM
실제 DOM을 흉내 낸 가상의 DOM
실제 DOM 보다 빠르게 UI 변경사항을 관리해준다
변경이 필요한 부분만 실제 DOM에 반영해줘서, 페이지 전체를 새로 불러오는 것 보다 효율적

05. JSX
Javscript를 확장한 문법으로 HTML태그와 유사하게 생겼지만 서로 다른것
createElement 함수 호출을 보다 직관적으로 표현해준다

// 컴포넌트 선언
function SomeComponent() {
	return <h1>{3 + 5}</h1>
}

// 엘리먼트 생성
const someElement = <SomeComponent />

// 컴포넌트의 재사용
function AnotherComponent() {

	return (
		<div>
			<SomeComponent />
			<SomeComponent />
		</div>
	)
}

브라우저는 Javascript의 확장인 JSX는 읽지 못하고 Javascript만 읽을 수 있기 때문에 트랜스파일러(Babel)를 사용하여 JSX를 Javascript로 변환하여 웹 브라우저에 보내줘야 한다

06. 컴포넌트 VS 엘리먼트
- 컴포넌트 : UI의 한 부분을 캡슐화한 코드 블록
function Greeting(){
    return <div>Hello World</div>
}

- 엘리먼트 : 컴포넌트의 인스턴스로, 화면에 표시할 내용을 기술한 객체
<Greeting />

07. State
React 컴포넌트 내부의 동적인 데이터를 관리하는데 사용되는 데이터 구조
State가 바뀌면 컴포넌트는 리렌더링을 하고 이게 된다는 것은 함수가 재실행 된다는 뜻이고 그결과 화면이 다시 그려진다
함수는 재실행되지만 상태값은 어딘가에 계속 기억되고 있다
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0); // 초기값 0

  const increment = () => {
    setCount(count + 1); // count를 1 증가시키는 함수
  };

  return (
    <div>
      <p>현재 카운트: {count}</p>
      <button onClick={increment}>증가</button>
    </div>
  );
}

08. Props
부모컴포넌트로부터 자식 컴포넌트에 전달하는 데이터
자식 컴포넌트 입장에서 Props는 읽기 전용으로 수정해서는 안된다
부모가 전달해주는 props값이 바뀌면 자식 컴포넌트는 리렌더링 한다

function Greeting(props) {
  return <h1>안녕하세요, {props.name}님!</h1>;
}

function App() {
	const someName = "철수"
  return (
    <div>
      <Greeting name="지수" />
      <Greeting name={someName} />
    </div>
	);
}

09. 리렌더링 조건 ***
1) state가 변경되면 컴포넌트는 리렌더링된다
2) 부모 컴포넌트로부터 전달받는 props값이 변경되면 컴포넌트는 리렌더링 된다
3) 부모 컴포넌트가 리렌더링 되면 자식 컴포넌트는 리렌더링 된다 -> React.memo

10. React Component의 생애주기(life cycle)
Mount => 컴포넌트가 처음 실행 될때 Run lazy initializers 
constructor
getDerivedStateFromProps
render
componentDidMount

Update => Render Update Cleanup Run ... 
getDerivedStateFromProps
shouldComponentUpdate
render
getSnapshotBeforeUpdate
componentDidUpdate

Unmount => 컴포넌트가 제거되는 것(컴포넌트를 사용하지 않을때 발생하는 이벤트) 
componentWillUnmount